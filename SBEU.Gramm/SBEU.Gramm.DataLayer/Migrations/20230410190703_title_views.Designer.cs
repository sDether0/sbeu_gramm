// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SBEU.Gramm.DataLayer.DataBase;

#nullable disable

namespace SBEU.Gramm.DataLayer.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230410190703_title_views")]
    partial class title_views
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NPostTags", b =>
                {
                    b.Property<string>("PostsId")
                        .HasColumnType("text");

                    b.Property<decimal>("TagsId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("NPostTags");
                });

            modelBuilder.Entity("NPostXIdentityUser", b =>
                {
                    b.Property<string>("PTaggedInId")
                        .HasColumnType("text");

                    b.Property<string>("TaggedUsersId")
                        .HasColumnType("text");

                    b.HasKey("PTaggedInId", "TaggedUsersId");

                    b.HasIndex("TaggedUsersId");

                    b.ToTable("NPostXIdentityUser");
                });

            modelBuilder.Entity("NPostXIdentityUser1", b =>
                {
                    b.Property<string>("WatchedPostsId")
                        .HasColumnType("text");

                    b.Property<string>("WatchedUsersId")
                        .HasColumnType("text");

                    b.HasKey("WatchedPostsId", "WatchedUsersId");

                    b.HasIndex("WatchedUsersId");

                    b.ToTable("NPostXIdentityUser1");
                });

            modelBuilder.Entity("NStoryXIdentityUser", b =>
                {
                    b.Property<string>("STaggedInId")
                        .HasColumnType("text");

                    b.Property<string>("TaggedUsersId")
                        .HasColumnType("text");

                    b.HasKey("STaggedInId", "TaggedUsersId");

                    b.HasIndex("TaggedUsersId");

                    b.ToTable("NStoryXIdentityUser");
                });

            modelBuilder.Entity("NStoryXIdentityUser1", b =>
                {
                    b.Property<string>("WatchedStoriesId")
                        .HasColumnType("text");

                    b.Property<string>("WatchedUsersId")
                        .HasColumnType("text");

                    b.HasKey("WatchedStoriesId", "WatchedUsersId");

                    b.HasIndex("WatchedUsersId");

                    b.ToTable("NStoryXIdentityUser1");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NCommentary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Commentaries");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicalPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ContentObjects");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NLike", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("CommentaryId")
                        .HasColumnType("text");

                    b.Property<string>("ContentId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<string>("StoryId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentaryId");

                    b.HasIndex("ContentId");

                    b.HasIndex("PostId");

                    b.HasIndex("StoryId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommentaryId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<string>("StoryId")
                        .HasColumnType("text");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentaryId");

                    b.HasIndex("PostId");

                    b.HasIndex("StoryId");

                    b.HasIndex("TargetId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NStory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("SoundId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContentId");

                    b.HasIndex("SoundId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.Relate.NPostContent", b =>
                {
                    b.Property<string>("ContentsId")
                        .HasColumnType("text");

                    b.Property<string>("PostsId")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("ContentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("NContentObjectNPost");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.Relate.XIdentityUserContent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ContentId")
                        .HasColumnType("text");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("XIdentityUserContent");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.Tags", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("Popularity")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer");

                    b.Property<string>("Telegram")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUserConfirm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConfirmCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("MailCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserConfirmations");
                });

            modelBuilder.Entity("XIdentityUserXIdentityUser", b =>
                {
                    b.Property<string>("FollowersId")
                        .HasColumnType("text");

                    b.Property<string>("FollowingId")
                        .HasColumnType("text");

                    b.HasKey("FollowersId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("XIdentityUserXIdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPostTags", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.Tags", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPostXIdentityUser", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", null)
                        .WithMany()
                        .HasForeignKey("PTaggedInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("TaggedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPostXIdentityUser1", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", null)
                        .WithMany()
                        .HasForeignKey("WatchedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("WatchedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NStoryXIdentityUser", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NStory", null)
                        .WithMany()
                        .HasForeignKey("STaggedInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("TaggedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NStoryXIdentityUser1", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NStory", null)
                        .WithMany()
                        .HasForeignKey("WatchedStoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("WatchedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NCommentary", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", "Post")
                        .WithMany("Commentaries")
                        .HasForeignKey("PostId");

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NLike", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NCommentary", "Commentary")
                        .WithMany("Likes")
                        .HasForeignKey("CommentaryId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", "Content")
                        .WithMany("Likes")
                        .HasForeignKey("ContentId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NStory", "Story")
                        .WithMany("Likes")
                        .HasForeignKey("StoryId");

                    b.Navigation("Author");

                    b.Navigation("Commentary");

                    b.Navigation("Content");

                    b.Navigation("Post");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NNotification", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NCommentary", "Commentary")
                        .WithMany()
                        .HasForeignKey("CommentaryId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NStory", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "Target")
                        .WithMany("Notifications")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Commentary");

                    b.Navigation("Post");

                    b.Navigation("Story");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NStory", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "Author")
                        .WithMany("Stories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", "Sound")
                        .WithMany()
                        .HasForeignKey("SoundId");

                    b.Navigation("Author");

                    b.Navigation("Content");

                    b.Navigation("Sound");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.RefreshToken", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.Relate.NPostContent", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", null)
                        .WithMany("PostPositions")
                        .HasForeignKey("ContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", null)
                        .WithMany("Position")
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.Relate.XIdentityUserContent", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", "Content")
                        .WithMany("UsersPosition")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", "User")
                        .WithMany("ContentsPosition")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("XIdentityUserXIdentityUser", b =>
                {
                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NCommentary", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NContentObject", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("PostPositions");

                    b.Navigation("UsersPosition");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NPost", b =>
                {
                    b.Navigation("Commentaries");

                    b.Navigation("Likes");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.NStory", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SBEU.Gramm.DataLayer.DataBase.Entities.XIdentityUser", b =>
                {
                    b.Navigation("ContentsPosition");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
